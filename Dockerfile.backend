# Stage 1: Build the Rust application
FROM rust:1-slim as builder
WORKDIR /app

# Install build dependencies if any (e.g., for SQLite)
# RUN apt-get update && apt-get install -y pkg-config libsqlite3-dev && rm -rf /var/lib/apt/lists/*
# Or using apk for alpine based rust images:
# RUN apk add --no-cache sqlite-dev

# Copy workspace manifests
COPY Cargo.toml Cargo.lock ./
COPY crates ./crates
COPY src-tauri ./src-tauri # Add back src-tauri as it's a workspace member

# Build dependencies first to leverage Docker cache
# Create dummy main.rs or lib.rs for each crate if needed for dependency caching
# RUN mkdir -p crates/lib/lib-api/src && echo "fn main() {}" > crates/lib/lib-api/src/lib.rs 
# ... repeat for other crates ...
# RUN cargo build --release --example run_api --bin run_api # Adjust target if needed

# Copy the actual source code
# (Already copied above, ensure all necessary parts are included)
COPY config ./config

# Build the specific example/binary for the API
# Build the 'run_api' example which is part of the 'lib-api' package
RUN cargo build --release --example run_api -p lib-api

# Stage 2: Create the final minimal image
FROM debian:bookworm-slim
WORKDIR /app

# Copy the built binary from the builder stage
# Update the path to reflect the 'examples' crate build output
COPY --from=builder /app/target/release/examples/run_api ./app_server

# Copy configuration and data
COPY --from=builder /app/config ./config
COPY data ./data # Copy data from host to final image

# Expose the port the backend listens on (assuming 5000 based on frontend proxy)
EXPOSE 5000

# Set the entrypoint to run the backend server
# Adjust the command if your application needs specific arguments or env vars
# Ensure the application reads config from ./config/default.toml
CMD ["./app_server"]
